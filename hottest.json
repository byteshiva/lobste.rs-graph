[{"short_id":"meeavr","short_id_url":"https://lobste.rs/s/meeavr","created_at":"2023-07-11T14:26:40.000-05:00","title":"KAP","url":"https://codeberg.org/loke/array","score":7,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/meeavr/kap","submitter_user":{"username":"inactive-user","created_at":"2018-01-29T12:22:53.000-06:00","is_admin":false,"about":"\nThis is a system account.\n\nTo balance privacy and long-term coherence of discussions, users can disown stories and comments to this account rather than deleting.\n([background](https://lobste.rs/s/usel8g))\nEverything here is because a user clicked 'disown' on an individual comment or checked the box to disown everything when deleting their account.\n\nIf you see a comment here, it does not indicate the author was banned.\nMods cannot disown users' stories and comments.\n","is_moderator":false,"karma":538,"avatar_url":"/avatars/inactive-user-100.png","invited_by_user":"pushcx"},"user_is_author":false,"tags":["apl","programming"]},{"short_id":"bc54tr","short_id_url":"https://lobste.rs/s/bc54tr","created_at":"2023-07-11T23:40:32.000-05:00","title":"AVX Timing Side-Channel Attacks against Address Space Layout Randomization","url":"https://arxiv.org/pdf/2304.07940.pdf","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/bc54tr/avx_timing_side_channel_attacks_against","submitter_user":{"username":"fro","created_at":"2016-04-13T15:27:31.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":2029,"avatar_url":"/avatars/fro-100.png","invited_by_user":"xero"},"user_is_author":false,"tags":["hardware","pdf","security"]},{"short_id":"hpusgg","short_id_url":"https://lobste.rs/s/hpusgg","created_at":"2023-07-11T05:00:19.000-05:00","title":"Roots of Trust are difficult","url":"https://mjg59.dreamwidth.org/66907.html","score":17,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/hpusgg/roots_trust_are_difficult","submitter_user":{"username":"Foxboron","created_at":"2019-11-06T05:54:41.000-06:00","is_admin":false,"about":"F/OSS Developer and Arch Linux Developer doing packaging and security.\r\n\r\nInterested in Golang, development and supply chain security.","is_moderator":false,"karma":1849,"avatar_url":"/avatars/Foxboron-100.png","invited_by_user":"jelly","github_username":"Foxboron","twitter_username":"MortenLinderud"},"user_is_author":false,"tags":["hardware","security"]},{"short_id":"ycel14","short_id_url":"https://lobste.rs/s/ycel14","created_at":"2023-07-10T12:36:10.000-05:00","title":"The easiest way to speed up Python with Rust","url":"https://pythonspeed.com/articles/easiest-rust-python/","score":39,"flags":0,"comment_count":13,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ycel14/easiest_way_speed_up_python_with_rust","submitter_user":{"username":"itamarst","created_at":"2016-04-28T10:05:47.000-05:00","is_admin":false,"about":"Writing about Python performance and faster development at https://pythonspeed.com, as well as offering consulting services. Writing about work/life balance and other software engineering skills at https://codewithoutrules.com.\r\n","is_moderator":false,"karma":5595,"avatar_url":"/avatars/itamarst-100.png","invited_by_user":"0x2ba22e11"},"user_is_author":true,"tags":["python","rust"]},{"short_id":"utzakd","short_id_url":"https://lobste.rs/s/utzakd","created_at":"2023-07-12T01:44:38.000-05:00","title":"Creating dynamic colors in SwiftUI","url":"https://www.jessesquires.com/blog/2023/07/11/creating-dynamic-colors-in-swiftui/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/utzakd/creating_dynamic_colors_swiftui","submitter_user":{"username":"raymii","created_at":"2013-11-20T11:58:43.000-06:00","is_admin":false,"about":"üêã\r\nhttps://raymii.org","is_moderator":false,"karma":24350,"avatar_url":"/avatars/raymii-100.png","invited_by_user":"journeysquid"},"user_is_author":false,"tags":["swift"]},{"short_id":"bc6wwc","short_id_url":"https://lobste.rs/s/bc6wwc","created_at":"2023-07-11T03:48:25.000-05:00","title":"aegraphs: Acyclic E-graphs for Efficient Optimization in a Production Compiler","url":"https://cfallin.org/pubs/egraphs2023_aegraphs_slides.pdf","score":14,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/bc6wwc/aegraphs_acyclic_e_graphs_for_efficient","submitter_user":{"username":"sanxiyn","created_at":"2015-01-21T09:51:34.000-06:00","is_admin":false,"about":"I made the initial port of Rust to ARM and Android.","is_moderator":false,"karma":11545,"avatar_url":"/avatars/sanxiyn-100.png","invited_by_user":"steveklabnik","github_username":"sanxiyn","twitter_username":"sanxiyn"},"user_is_author":false,"tags":["compilers","pdf","slides"]},{"short_id":"nsa1tj","short_id_url":"https://lobste.rs/s/nsa1tj","created_at":"2023-07-11T07:22:35.000-05:00","title":"Atuin's new encryption scheme","url":"https://atuin.sh/blog/new-encryption","score":11,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/nsa1tj/atuin_s_new_encryption_scheme","submitter_user":{"username":"athaller","created_at":"2021-01-13T05:40:18.000-06:00","is_admin":false,"about":"","is_moderator":false,"karma":145,"avatar_url":"/avatars/athaller-100.png","invited_by_user":"mre"},"user_is_author":false,"tags":["cryptography"]},{"short_id":"s1h7oe","short_id_url":"https://lobste.rs/s/s1h7oe","created_at":"2023-07-11T10:48:30.000-05:00","title":"Generate from Constraints: Using Prompt-Hoisting for GPT-based Code Generation","url":"https://michaelfeathers.silvrback.com/prompt-hoisting-for-gpt-based-code-generation ","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/s1h7oe/generate_from_constraints_using_prompt","submitter_user":{"username":"mfeathers","created_at":"2017-10-30T10:30:24.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":1262,"avatar_url":"/avatars/mfeathers-100.png","invited_by_user":"singpolyma"},"user_is_author":true,"tags":["ai","formalmethods","practices","testing"]},{"short_id":"o9bgcz","short_id_url":"https://lobste.rs/s/o9bgcz","created_at":"2023-07-10T20:56:17.000-05:00","title":"Back-end parallelism in the Rust compiler","url":"https://nnethercote.github.io/2023/07/11/back-end-parallelism-in-the-rust-compiler.html","score":14,"flags":0,"comment_count":6,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/o9bgcz/back_end_parallelism_rust_compiler","submitter_user":{"username":"msfjarvis","created_at":"2020-04-24T11:41:56.000-05:00","is_admin":false,"about":"Android and Kotlin developer, currently working for [Dyte](https://dyte.io/)","is_moderator":false,"karma":1281,"avatar_url":"/avatars/msfjarvis-100.png","invited_by_user":"Amolith","github_username":"msfjarvis","twitter_username":"msfjarvis"},"user_is_author":false,"tags":["rust"]},{"short_id":"gaz50h","short_id_url":"https://lobste.rs/s/gaz50h","created_at":"2023-07-10T12:38:07.000-05:00","title":"How Ahrefs Saved US$400M in 3 Years by NOT Going to the Cloud","url":"https://tech.ahrefs.com/how-ahrefs-saved-us-400m-in-3-years-by-not-going-to-the-cloud-8939dd930af8","score":26,"flags":0,"comment_count":27,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/gaz50h/how_ahrefs_saved_us_400m_3_years_by_not","submitter_user":{"username":"athaller","created_at":"2021-01-13T05:40:18.000-06:00","is_admin":false,"about":"","is_moderator":false,"karma":145,"avatar_url":"/avatars/athaller-100.png","invited_by_user":"mre"},"user_is_author":false,"tags":["performance"]},{"short_id":"43ghdi","short_id_url":"https://lobste.rs/s/43ghdi","created_at":"2023-07-11T12:34:54.000-05:00","title":"Modeling Game Mechanics with Ceptre","url":"https://www.convivial.tools/PapersPublic/ceptre-tog.pdf","score":3,"flags":0,"comment_count":0,"description":"\u003cp\u003eGame description languages have a variety of uses, including formal reasoning about the emergent consequences of a game‚Äôs mechanics, implementation of artificial intelligence decision-making where the game‚Äôs rules make up the space of possible actions, automated game and level generation, and game prototyping for the sake of low-time-investment design and tinkering. However, in practice, a new game description language has been invented for almost every new use case, without providing formal underpinnings that follow generalizable principles and can be reasoned about separately from the specific software implementation of the language. Ceptre is a language that attempts to break this pattern, based on an old idea known as multiset rewriting. This paper describes the language formally, through example, and in a tutorial style, then demonstrates its use for writing formal specifications of game mechanics so that they may be interactively explored, queried, and analyzed in a computational framework. Ceptre allows designers to step through executions, interact with the mechanics from the standpoint of a player, run random simulated playthroughs, collect and analyze data from said playthroughs, and formally verify mathematical properties of the mechanics, and it has been used in a number of research projects since its inception, for applications such as procedural narrative generation, formal game modeling, and game AI.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://ieeexplore.ieee.org/abstract/document/10174675\" rel=\"ugc\"\u003eIEEE\u003c/a\u003e\u003c/p\u003e\n","description_plain":"Game description languages have a variety of uses, including formal reasoning about the emergent consequences of a game's mechanics, implementation of artificial intelligence decision-making where the game's rules make up the space of possible actions, automated game and level generation, and game prototyping for the sake of low-time-investment design and tinkering. However, in practice, a new game description language has been invented for almost every new use case, without providing formal underpinnings that follow generalizable principles and can be reasoned about separately from the specific software implementation of the language. Ceptre is a language that attempts to break this pattern, based on an old idea known as multiset rewriting. This paper describes the language formally, through example, and in a tutorial style, then demonstrates its use for writing formal specifications of game mechanics so that they may be interactively explored, queried, and analyzed in a computational framework. Ceptre allows designers to step through executions, interact with the mechanics from the standpoint of a player, run random simulated playthroughs, collect and analyze data from said playthroughs, and formally verify mathematical properties of the mechanics, and it has been used in a number of research projects since its inception, for applications such as procedural narrative generation, formal game modeling, and game AI.\r\n\r\n[IEEE](https://ieeexplore.ieee.org/abstract/document/10174675)","comments_url":"https://lobste.rs/s/43ghdi/modeling_game_mechanics_with_ceptre","submitter_user":{"username":"calvin","created_at":"2014-07-01T06:47:13.000-05:00","is_admin":false,"about":"Soon we will all have special names... names designed to make the cathode ray tube resonate.\r\n\r\nDavid Chisnall stan account.","is_moderator":false,"karma":100507,"avatar_url":"/avatars/calvin-100.png","invited_by_user":"nbyouri","github_username":"NattyNarwhal"},"user_is_author":false,"tags":["compsci","games","pdf"]},{"short_id":"hgsqun","short_id_url":"https://lobste.rs/s/hgsqun","created_at":"2023-07-11T11:40:31.000-05:00","title":"Fighting Rust Anxiety: Insights from a Go Developer, Navigating Rust Syntax Shenanigans","url":"https://arriqaaq.substack.com/p/fighting-rust-anxiety-insights-from","score":6,"flags":0,"comment_count":8,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/hgsqun/fighting_rust_anxiety_insights_from_go","submitter_user":{"username":"bugsmith","created_at":"2023-04-21T08:58:57.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":439,"avatar_url":"/avatars/bugsmith-100.png","invited_by_user":"river"},"user_is_author":false,"tags":["go","programming","rant","rust"]},{"short_id":"zemngq","short_id_url":"https://lobste.rs/s/zemngq","created_at":"2023-07-11T05:47:37.000-05:00","title":"What is Functional Programming?","url":"https://joseph.yiasemides.com/posts/what-is-functional-programming","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/zemngq/what_is_functional_programming","submitter_user":{"username":"Dzol","created_at":"2016-08-02T15:16:49.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":3,"avatar_url":"/avatars/Dzol-100.png","invited_by_user":"elbrujohalcon","github_username":"Dzol"},"user_is_author":true,"tags":["elixir","javascript","programming"]},{"short_id":"nwzykw","short_id_url":"https://lobste.rs/s/nwzykw","created_at":"2023-07-11T13:30:13.000-05:00","title":"Permission","url":"https://adactio.com/journal/20315","score":1,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/nwzykw/permission","submitter_user":{"username":"carlana","created_at":"2021-07-19T11:55:18.000-05:00","is_admin":false,"about":"Carlana Johnson is a philosopher and programmer, currently employed as the Director of Technology for Spotlight PA.","is_moderator":false,"karma":15252,"avatar_url":"/avatars/carlana-100.png","invited_by_user":"peterbourgon","github_username":"carlmjohnson"},"user_is_author":false,"tags":["ai"]},{"short_id":"oml1ke","short_id_url":"https://lobste.rs/s/oml1ke","created_at":"2023-07-10T05:57:34.000-05:00","title":"What‚Äôs New in Thunderbird 115","url":"https://www.thunderbird.net/en-US/thunderbird/115.0/whatsnew/","score":40,"flags":0,"comment_count":24,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/oml1ke/what_s_new_thunderbird_115","submitter_user":{"username":"acatton","created_at":"2015-02-13T18:54:10.000-06:00","is_admin":false,"about":"I'm just a software engineer who likes his job.\r\n\r\nI'm currently a Site Reliability Engineer at Google, Inc.\r\n\r\n**Opinions are my own, and NOT the views of my current or past employers**","is_moderator":false,"karma":3016,"avatar_url":"/avatars/acatton-100.png","invited_by_user":"csantosb","github_username":"acatton"},"user_is_author":false,"tags":["release"]},{"short_id":"yrn2et","short_id_url":"https://lobste.rs/s/yrn2et","created_at":"2023-07-10T13:50:52.000-05:00","title":"Assembly as a first programming language?","url":"","score":17,"flags":0,"comment_count":33,"description":"\u003cp\u003eI came across this book[1] and was intrigued by the premise. Has anyone learned assembly as a first programming language or known anyone who has?\u003c/p\u003e\n\u003cp\u003eI can imagine it working out well for certain students, but I don‚Äôt fully agree that it would make higher level languages easier as the author claims, or at least I have trouble imagining how it would. That said, I‚Äôm always grateful for my own experience with C as one of my first languages and exposure to explicit type declarations and pointers and memory management. But assembly is a different beast, involving a different paradigm altogether\u003c/p\u003e\n\u003cp\u003eInterested in hearing peoples experiences and/or thoughts on the pedagogical merits/anti-merits\u003c/p\u003e\n\u003cp\u003e[1] \u003ca href=\"https://link.springer.com/book/10.1007/978-1-4842-7437-8\" rel=\"ugc\"\u003ehttps://link.springer.com/book/10.1007/978-1-4842-7437-8\u003c/a\u003e\u003c/p\u003e\n","description_plain":"I came across this book[1] and was intrigued by the premise. Has anyone learned assembly as a first programming language or known anyone who has?\r\n\r\nI can imagine it working out well for certain students, but I don't fully agree that it would make higher level languages easier as the author claims, or at least I have trouble imagining how it would. That said, I'm always grateful for my own experience with C as one of my first languages and exposure to explicit type declarations and pointers and memory management. But assembly is a different beast, involving a different paradigm altogether \r\n\r\nInterested in hearing peoples experiences and/or thoughts on the pedagogical merits/anti-merits \r\n\r\n[1] https://link.springer.com/book/10.1007/978-1-4842-7437-8","comments_url":"https://lobste.rs/s/yrn2et/assembly_as_first_programming_language","submitter_user":{"username":"vector_spaces","created_at":"2020-01-28T00:07:17.000-06:00","is_admin":false,"about":"","is_moderator":false,"karma":415,"avatar_url":"/avatars/vector_spaces-100.png","invited_by_user":"bandali"},"user_is_author":true,"tags":["ask","assembly"]},{"short_id":"jfjzyp","short_id_url":"https://lobste.rs/s/jfjzyp","created_at":"2023-07-10T06:21:28.000-05:00","title":"Factor: a practical stack language","url":"https://factorcode.org","score":48,"flags":0,"comment_count":7,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/jfjzyp/factor_practical_stack_language","submitter_user":{"username":"Drakonis","created_at":"2016-09-05T12:37:08.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":263,"avatar_url":"/avatars/Drakonis-100.png","invited_by_user":"albino"},"user_is_author":false,"tags":["programming"]},{"short_id":"eoa0ku","short_id_url":"https://lobste.rs/s/eoa0ku","created_at":"2023-07-11T11:06:57.000-05:00","title":"DEF CON 30 - Zachary Minneker - How To Get MUMPS Thirty Years Later - Hacking the Govt w FOIAd Code","url":"https://www.youtube.com/watch?v=nSbN7p39SrA","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/eoa0ku/def_con_30_zachary_minneker_how_get_mumps","submitter_user":{"username":"bowyakka","created_at":"2014-04-02T09:33:26.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":284,"avatar_url":"/avatars/bowyakka-100.png","invited_by_user":"andrewcooke"},"user_is_author":false,"tags":["security","video"]},{"short_id":"tjuuf5","short_id_url":"https://lobste.rs/s/tjuuf5","created_at":"2023-07-10T08:23:22.000-05:00","title":"Firefox address bar tips","url":"https://wiki.tilde.institute/w/firefox-address-bar-tips","score":24,"flags":0,"comment_count":12,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/tjuuf5/firefox_address_bar_tips","submitter_user":{"username":"phoebos","created_at":"2022-06-23T18:26:25.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":556,"avatar_url":"/avatars/phoebos-100.png","invited_by_user":"neauoire"},"user_is_author":false,"tags":["browsers"]},{"short_id":"7lmn0y","short_id_url":"https://lobste.rs/s/7lmn0y","created_at":"2023-07-10T14:20:33.000-05:00","title":"Usability of modern solutions for logs' analysis and debugging is totally screwed","url":"","score":10,"flags":3,"comment_count":26,"description":"\u003cp\u003eWhy we generate and collect logs? Mostly for further analysis and debugging. For example:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTo find all the error logs with a particular substring in them, and then to inspect them visually.\u003c/li\u003e\n\u003cli\u003eTo find logs for the particular request_id, user_id or trace_id and then to inspect them visually.\u003c/li\u003e\n\u003cli\u003eTo calculate the number of successful/unsuccessful hacker attempts to SSH into your host.\u003c/li\u003e\n\u003cli\u003eTo calculate stats over web logs for a particular ip, domain, etc.\u003c/li\u003e\n\u003cli\u003eTo calculate the frequency of logs with particular substrings.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAll these tasks are easy to perform from command-line when logs are stored in plain files. Just start with \u003ccode\u003ecat /path/to/log | grep some-substring\u003c/code\u003e. Then iteratively apply the needed commands to the selected logs - \u003ccode\u003ewc\u003c/code\u003e, \u003ccode\u003eawk\u003c/code\u003e, more \u003ccode\u003egrep\u003c/code\u003e, \u003ccode\u003eless\u003c/code\u003e, \u003ccode\u003ehead\u003c/code\u003e, \u003ccode\u003esort\u003c/code\u003e, \u003ccode\u003euniq\u003c/code\u003e, \u003ccode\u003ecut\u003c/code\u003e, etc. - until the desired result is obtained. This approach serves great for analyzing locally stored logs on a few hosts. It doesn‚Äôt scale well for cases when logs should be analyzed across hundreds of hosts and/or  application instances. Of course, there are command-line tools for parallel execution of unix commands across hundreds of hosts, which can help with this case. But we wanted better solution.\u003c/p\u003e\n\u003cp\u003eSo we‚Äôve got ElasticSearch and Grafana Loki. Both solutions allow collecting logs from hundreds of hosts/applications. But they totally screw up analysis of these logs. They provide awkward to use query languages with silly limitations (such as the number of returned log lines per query) and very limited integration with existing command-line tools for logs‚Äô analysis mentioned above. For example, you cannot easily perform the equivalent of \u003ccode\u003ecat /log/file | grep some-string | my-custom-script-for-analysis\u003c/code\u003e when logs stored in ElasticSearch and Grafana Loki contain millions or billions of lines with \u003ccode\u003esome-string\u003c/code\u003e substring.\u003c/p\u003e\n\u003cp\u003eElasticSearch and Loki also need non-trivial configuration, index creation, performance tuning and maintenance. Do we really want paying this price in exchange to get an awkward ability to analyze logs collected from hundreds of hosts/applications?\u003c/p\u003e\n\u003cp\u003eProbably, it is time to use better solution, which allows collecting logs from hundreds of sources and then analyzing them with good old command-line tools in the usual ergonomic way? This question was raised many times when I had to analyze logs with modern solutions for logs. I couldn‚Äôt find the proper solution, so decided creating it on my own based on my experience with creating VictoriaMetrics. So I created open-source user-friendly database for logs - \u003ca href=\"https://docs.victoriametrics.com/VictoriaLogs/\" rel=\"ugc\"\u003eVictoriaLogs\u003c/a\u003e. It accepts structured and unstructured logs from popular log shippers such as Filebeat, Fluentbit, Logstash, Vector, etc., it supports fast full-text search without any configuration / tuning, and it has perfect integration with good old command-line tools. Read more about the integration \u003ca href=\"https://docs.victoriametrics.com/VictoriaLogs/querying/#command-line\" rel=\"ugc\"\u003ehere\u003c/a\u003e. Give it a try and share your experience!\u003c/p\u003e\n","description_plain":"Why we generate and collect logs? Mostly for further analysis and debugging. For example:\r\n\r\n- To find all the error logs with a particular substring in them, and then to inspect them visually.\r\n- To find logs for the particular request_id, user_id or trace_id and then to inspect them visually.\r\n- To calculate the number of successful/unsuccessful hacker attempts to SSH into your host.\r\n- To calculate stats over web logs for a particular ip, domain, etc.\r\n- To calculate the frequency of logs with particular substrings.\r\n\r\nAll these tasks are easy to perform from command-line when logs are stored in plain files. Just start with `cat /path/to/log | grep some-substring`. Then iteratively apply the needed commands to the selected logs - `wc`, `awk`, more `grep`, `less`, `head`, `sort`, `uniq`, `cut`, etc. - until the desired result is obtained. This approach serves great for analyzing locally stored logs on a few hosts. It doesn't scale well for cases when logs should be analyzed across hundreds of hosts and/or  application instances. Of course, there are command-line tools for parallel execution of unix commands across hundreds of hosts, which can help with this case. But we wanted better solution.\r\n\r\nSo we've got ElasticSearch and Grafana Loki. Both solutions allow collecting logs from hundreds of hosts/applications. But they totally screw up analysis of these logs. They provide awkward to use query languages with silly limitations (such as the number of returned log lines per query) and very limited integration with existing command-line tools for logs' analysis mentioned above. For example, you cannot easily perform the equivalent of `cat /log/file | grep some-string | my-custom-script-for-analysis` when logs stored in ElasticSearch and Grafana Loki contain millions or billions of lines with `some-string` substring.\r\n\r\nElasticSearch and Loki also need non-trivial configuration, index creation, performance tuning and maintenance. Do we really want paying this price in exchange to get an awkward ability to analyze logs collected from hundreds of hosts/applications?\r\n\r\nProbably, it is time to use better solution, which allows collecting logs from hundreds of sources and then analyzing them with good old command-line tools in the usual ergonomic way? This question was raised many times when I had to analyze logs with modern solutions for logs. I couldn't find the proper solution, so decided creating it on my own based on my experience with creating VictoriaMetrics. So I created open-source user-friendly database for logs - [VictoriaLogs](https://docs.victoriametrics.com/VictoriaLogs/). It accepts structured and unstructured logs from popular log shippers such as Filebeat, Fluentbit, Logstash, Vector, etc., it supports fast full-text search without any configuration / tuning, and it has perfect integration with good old command-line tools. Read more about the integration [here](https://docs.victoriametrics.com/VictoriaLogs/querying/#command-line). Give it a try and share your experience!","comments_url":"https://lobste.rs/s/7lmn0y/usability_modern_solutions_for_logs","submitter_user":{"username":"valyala","created_at":"2020-01-26T16:58:51.000-06:00","is_admin":false,"about":"CTO at VictoriaMetrics, creator of VictoriaLogs","is_moderator":false,"karma":27,"avatar_url":"/avatars/valyala-100.png","invited_by_user":"bilinguliar","github_username":"valyala"},"user_is_author":true,"tags":["devops"]},{"short_id":"p4ysc0","short_id_url":"https://lobste.rs/s/p4ysc0","created_at":"2023-07-11T11:09:25.000-05:00","title":"C++23: The Next C++ Standard","url":"http://modernescpp.com/index.php/c-23-the-next-c-standard","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/p4ysc0/c_23_next_c_standard","submitter_user":{"username":"raymii","created_at":"2013-11-20T11:58:43.000-06:00","is_admin":false,"about":"üêã\r\nhttps://raymii.org","is_moderator":false,"karma":24350,"avatar_url":"/avatars/raymii-100.png","invited_by_user":"journeysquid"},"user_is_author":false,"tags":["c++"]},{"short_id":"1xfom3","short_id_url":"https://lobste.rs/s/1xfom3","created_at":"2023-07-11T07:05:11.000-05:00","title":"Smaller Is Better: Ultra-Compact Graph Representations for Big Graphs","url":"https://dzone.com/articles/smaller-is-better-ultra-compact-graph-representati","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/1xfom3/smaller_is_better_ultra_compact_graph","submitter_user":{"username":"LukeEF","created_at":"2020-04-14T18:02:45.000-05:00","is_admin":false,"about":"Sunlit Uplands","is_moderator":false,"karma":62,"avatar_url":"/avatars/LukeEF-100.png","invited_by_user":"Hail_Spacecake"},"user_is_author":false,"tags":["databases","performance","scaling"]},{"short_id":"r3kq9h","short_id_url":"https://lobste.rs/s/r3kq9h","created_at":"2023-07-10T16:55:19.000-05:00","title":"Microsoft's userspace keylogger tutorial","url":"https://cohost.org/blep/post/1982850-i-think-microsoft-wi","score":6,"flags":0,"comment_count":11,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/r3kq9h/microsoft_s_userspace_keylogger","submitter_user":{"username":"cat","created_at":"2021-10-26T01:03:41.000-05:00","is_admin":false,"about":"- Enjoys petting rats\r\n- SRE at Google\r\n- Computational Linguistics MS student\r\n- Queer","is_moderator":false,"karma":15,"avatar_url":"/avatars/cat-100.png","invited_by_user":"Irene"},"user_is_author":false,"tags":["security","windows"]},{"short_id":"0vjays","short_id_url":"https://lobste.rs/s/0vjays","created_at":"2023-07-10T11:35:25.000-05:00","title":"A Rust User's Guide to Generics","url":"https://www.worldofbs.com/rust-generics/","score":9,"flags":0,"comment_count":4,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/0vjays/rust_user_s_guide_generics","submitter_user":{"username":"cgenschwap","created_at":"2020-07-01T16:54:12.000-05:00","is_admin":false,"about":"$BLOG: https://www.worldofbs.com/\r\n\r\n$JOB: Distributed and low-latency systems in Rust (formerly AWS, now independent)\r\n\r\n$TECH: Framework + NixOS\r\n\r\n$CONTACT: contact at worldofbs dot com \r\n","is_moderator":false,"karma":1042,"avatar_url":"/avatars/cgenschwap-100.png","invited_by_user":"pushcx"},"user_is_author":true,"tags":["rust"]},{"short_id":"b8gubk","short_id_url":"https://lobste.rs/s/b8gubk","created_at":"2023-07-10T10:07:31.000-05:00","title":"Feature Flags: Theory vs Reality","url":"https://bpapillon.com/post/feature-flags-theory-vs-reality/","score":14,"flags":0,"comment_count":5,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/b8gubk/feature_flags_theory_vs_reality","submitter_user":{"username":"bpapillon","created_at":"2021-09-22T08:32:35.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":14,"avatar_url":"/avatars/bpapillon-100.png","invited_by_user":"mrjoes"},"user_is_author":true,"tags":["devops","practices","rant"]}]